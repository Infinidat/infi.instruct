from infi.unittest import TestCase
from infi.instruct.buffer import (Buffer, be_int_field, str_field, list_field, bytes_ref, total_size,
                                  bytearray_field, after_ref, member_func_ref, str_type, buffer_field)

# Output from sg_ses -p 0x1:
#
#   NEWISYS   NDS-4600-JD       B507
# Configuration diagnostic page:
#   number of secondary subenclosures: 0
#   generation code: 0x1
#   enclosure descriptor list
#     Subenclosure identifier: 0 (primary)
#       relative ES process id: 1, number of ES processes: 2
#       number of type descriptor headers: 8
#       enclosure logical identifier (hex): 500093d0006a7000
#       enclosure vendor: NEWISYS   product: NDS-4600-JD       rev: B507
#   type descriptor header/text list
#     Element type: Array device slot, subenclosure id: 0
#       number of possible elements: 60
#       text: Array Dev Slot
#     Element type: vendor specific [0x9e], subenclosure id: 0
#       number of possible elements: 1
#       text: 4600 Enclosure
#     Element type: Power supply, subenclosure id: 0
#       number of possible elements: 2
#       text: Power Supply
#     Element type: Cooling, subenclosure id: 0
#       number of possible elements: 4
#       text: Cooling Fan
#     Element type: Temperature sensor, subenclosure id: 0
#       number of possible elements: 6
#       text: Temp Sensor
#     Element type: Audible alarm, subenclosure id: 0
#       number of possible elements: 1
#       text: Buzzer
#     Element type: Enclosure services controller electronics, subenclosure id: 0
#       number of possible elements: 2
#       text: ES Processor
#     Element type: SAS expander, subenclosure id: 0
#       number of possible elements: 6
#       text: SAS Expander

SES_PAGE_SAMPLE = \
    (b"\x01\x00\x00\xCC" +
     b"\x00\x00\x00\x01\x12\x00\x08\x24\x50\x00\x93\xD0\x00\x6A\x70\x00" +
     b"\x4E\x45\x57\x49\x53\x59\x53\x20\x4E\x44\x53\x2D\x34\x36\x30\x30" +
     b"\x2D\x4A\x44\x20\x20\x20\x20\x20\x42\x35\x30\x37\x17\x3C\x00\x10" +
     b"\x9E\x01\x00\x10\x02\x02\x00\x10\x03\x04\x00\x10\x04\x06\x00\x10" +
     b"\x06\x01\x00\x10\x07\x02\x00\x10\x18\x06\x00\x10\x41\x72\x72\x61" +
     b"\x79\x20\x44\x65\x76\x20\x53\x6C\x6F\x74\x20\x20\x34\x36\x30\x30" +
     b"\x20\x45\x6E\x63\x6C\x6F\x73\x75\x72\x65\x20\x20\x50\x6F\x77\x65" +
     b"\x72\x20\x53\x75\x70\x70\x6C\x79\x20\x20\x20\x20\x43\x6F\x6F\x6C" +
     b"\x69\x6E\x67\x20\x46\x61\x6E\x20\x20\x20\x20\x20\x54\x65\x6D\x70" +
     b"\x20\x53\x65\x6E\x73\x6F\x72\x20\x20\x20\x20\x20\x42\x75\x7A\x7A" +
     b"\x65\x72\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x45\x53\x20\x50" +
     b"\x72\x6F\x63\x65\x73\x73\x6F\x72\x20\x20\x20\x20\x53\x41\x53\x20" +
     b"\x45\x78\x70\x61\x6E\x64\x65\x72\x20\x20\x20\x20")


class EnclosureDescriptor(Buffer):
    enclosure_services_processes_num = be_int_field(where=bytes_ref[0].bits[0:3])
    relative_enclosure_services_process_identifier = be_int_field(where=bytes_ref[0].bits[4:7])
    subenclosure_identifier = be_int_field(where=bytes_ref[1])
    type_descriptor_headers_num = be_int_field(where=bytes_ref[2])
    enclosure_descriptor_length = be_int_field(where=bytes_ref[3])
    enclosure_logical_identifier = bytearray_field(where=bytes_ref[4:12])  # FIXME use NAA stuff
    enclosure_vendor_identification = str_field(where=bytes_ref[12:20])
    product_identification = str_field(where=bytes_ref[20:36])
    product_revision_level = str_field(where=bytes_ref[36:40])  # FIXME use INQUIRY stuff
    vendor_specific_enclosure_information = bytearray_field(where_when_pack=bytes_ref[40:],
                                                            where_when_unpack=bytes_ref[40:enclosure_descriptor_length + 4])


class TypeDescriptorHeader(Buffer):
    element_type = be_int_field(where=bytes_ref[0])
    possible_elements_num = be_int_field(where=bytes_ref[1])
    subenclosure_identifier = be_int_field(where=bytes_ref[2])
    type_descriptor_text_length = be_int_field(where=bytes_ref[3])


class ConfigurationDiagnosticPage(Buffer):
    def _calc_num_type_descriptor_headers(self):
        return sum(desc.type_descriptor_headers_num for desc in self.enclosure_descriptor_list)

    def _unpack_type_descriptor_text(self, buffer, index, **kwargs):
        l = self.type_descriptor_header_list[index].type_descriptor_text_length
        return buffer[0:l].to_bytes(), l

    page_code = be_int_field(where=bytes_ref[0])
    secondary_subenclosures_num = be_int_field(where=bytes_ref[1])
    page_length = be_int_field(where=bytes_ref[2:4], set_before_pack=total_size - 4)
    generation_code = be_int_field(where=bytes_ref[4:8])
    enclosure_descriptor_list = list_field(type=EnclosureDescriptor,
                                           where=bytes_ref[8:],
                                           n=secondary_subenclosures_num + 1)
    type_descriptor_header_list = list_field(where=bytes_ref[after_ref(enclosure_descriptor_list):],
                                             type=TypeDescriptorHeader,
                                             n=member_func_ref(_calc_num_type_descriptor_headers))
    type_descriptor_text_list = list_field(where=bytes_ref[after_ref(type_descriptor_header_list):],
                                           type=str_type,
                                           unpack_selector=_unpack_type_descriptor_text,
                                           n=member_func_ref(_calc_num_type_descriptor_headers))

    def _calc_num_type_descriptor_headers(self):
        return sum(o.type_descriptor_headers_num for o in self.enclosure_descriptor_list)


SES_ELEMENT_DESCR_PAGE_SAMPLE = \
    (b"\x01\x00\x00\xCC" +
     b"\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x20\x31\x20\x30\x30\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x20\x32\x20\x30\x31\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x20\x33\x20\x30\x32\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x20\x34\x20\x30\x33\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x20\x35\x20\x30\x34\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x20\x36\x20\x30\x35\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x20\x37\x20\x30\x36\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x20\x38\x20\x30\x37\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x20\x39\x20\x30\x38\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x31\x30\x20\x30\x39\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x31\x31\x20\x30\x41\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x31\x32\x20\x30\x42\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x31\x33\x20\x31\x30\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x31\x34\x20\x31\x31\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x31\x35\x20\x31\x32\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x31\x36\x20\x31\x33\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x31\x37\x20\x31\x34\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x31\x38\x20\x31\x35\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x31\x39\x20\x31\x36\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x32\x30\x20\x31\x37\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x32\x31\x20\x31\x38\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x32\x32\x20\x31\x39\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x32\x33\x20\x31\x41\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x32\x34\x20\x31\x42\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x32\x35\x20\x32\x30\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x32\x36\x20\x32\x31\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x32\x37\x20\x32\x32\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x32\x38\x20\x32\x33\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x32\x39\x20\x32\x34\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x33\x30\x20\x32\x35\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x33\x31\x20\x32\x36\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x33\x32\x20\x32\x37\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x33\x33\x20\x32\x38\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x33\x34\x20\x32\x39\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x33\x35\x20\x32\x41\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x33\x36\x20\x32\x42\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x33\x37\x20\x33\x30\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x33\x38\x20\x33\x31\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x33\x39\x20\x33\x32\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x34\x30\x20\x33\x33\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x34\x31\x20\x33\x34\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x34\x32\x20\x33\x35\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x34\x33\x20\x33\x36\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x34\x34\x20\x33\x37\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x34\x35\x20\x33\x38\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x34\x36\x20\x33\x39\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x34\x37\x20\x33\x41\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x34\x38\x20\x33\x42\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x34\x39\x20\x34\x30\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x35\x30\x20\x34\x31\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x35\x31\x20\x34\x32\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x35\x32\x20\x34\x33\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x35\x33\x20\x34\x34\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x35\x34\x20\x34\x35\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x35\x35\x20\x34\x36\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x35\x36\x20\x34\x37\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x35\x37\x20\x34\x38\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x35\x38\x20\x34\x39\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x35\x39\x20\x34\x41\x20\x20\x00\x00\x00\x0c\x53\x4c\x4f\x54" +
     b"\x20\x36\x30\x20\x34\x42\x20\x20\x00\x00\x00\x00\x00\x00\x00\xa8" +
     b"\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20" +
     b"\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20" +
     b"\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20" +
     b"\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x54\x43\x41\x2d" +
     b"\x30\x30\x33\x34\x31\x2d\x30\x31\x2d\x42\x2d\x41\x32\x20\x20\x20" +
     b"\x4d\x58\x45\x33\x34\x30\x30\x30\x32\x38\x38\x52\x42\x30\x33\x31" +
     b"\x54\x43\x41\x2d\x30\x30\x33\x34\x30\x2d\x30\x31\x2d\x42\x20\x20" +
     b"\x4d\x58\x45\x33\x34\x30\x30\x30\x32\x38\x50\x52\x41\x31\x36\x31" +
     b"\x54\x43\x41\x2d\x30\x30\x33\x34\x30\x2d\x30\x31\x2d\x42\x20\x20" +
     b"\x4d\x58\x45\x33\x34\x30\x30\x30\x32\x38\x56\x52\x41\x31\x30\x43" +
     b"\x30\x30\x30\x39\x30\x30\x30\x31\x00\x00\x00\x00\x00\x00\x00\x5c" +
     b"\x50\x43\x4d\x20\x41\x20\x20\x20\x50\x57\x52\x2d\x30\x30\x30\x35" +
     b"\x39\x2d\x30\x31\x2d\x42\x30\x30\x54\x48\x44\x45\x4c\x30\x30\x30" +
     b"\x31\x35\x4e\x52\x45\x31\x32\x46\x41\x31\x30\x30\x30\x30\x30\x30" +
     b"\x54\x44\x50\x53\x2d\x31\x32\x30\x30\x41\x42\x20\x41\x30\x30\x30" +
     b"\x41\x42\x4d\x54\x31\x31\x32\x31\x30\x30\x31\x38\x31\x32\x30\x30" +
     b"\x30\x30\x46\x30\x30\x30\x30\x30\x30\x31\x30\x39\x00\x00\x00\x5c" +
     b"\x50\x43\x4d\x20\x42\x20\x20\x20\x50\x57\x52\x2d\x30\x30\x30\x35" +
     b"\x39\x2d\x30\x31\x2d\x42\x30\x30\x54\x48\x44\x45\x4c\x30\x30\x30" +
     b"\x31\x35\x4e\x52\x45\x31\x35\x33\x41\x31\x30\x30\x30\x30\x30\x30" +
     b"\x54\x44\x50\x53\x2d\x31\x32\x30\x30\x41\x42\x20\x41\x30\x30\x30" +
     b"\x41\x42\x4d\x54\x31\x31\x32\x31\x30\x30\x31\x38\x34\x38\x30\x30" +
     b"\x30\x30\x46\x30\x30\x30\x30\x30\x30\x31\x30\x39\x00\x00\x00\x00" +
     b"\x00\x00\x00\x28\x50\x43\x4d\x41\x46\x41\x4e\x31\x50\x57\x52\x2d" +
     b"\x30\x30\x30\x35\x39\x2d\x30\x31\x2d\x42\x30\x30\x54\x48\x44\x45" +
     b"\x4c\x30\x30\x30\x31\x35\x4e\x52\x45\x31\x32\x46\x00\x00\x00\x28" +
     b"\x50\x43\x4d\x41\x46\x41\x4e\x32\x50\x57\x52\x2d\x30\x30\x30\x35" +
     b"\x39\x2d\x30\x31\x2d\x42\x30\x30\x54\x48\x44\x45\x4c\x30\x30\x30" +
     b"\x31\x35\x4e\x52\x45\x31\x32\x46\x00\x00\x00\x28\x50\x43\x4d\x42" +
     b"\x46\x41\x4e\x31\x50\x57\x52\x2d\x30\x30\x30\x35\x39\x2d\x30\x31" +
     b"\x2d\x42\x30\x30\x54\x48\x44\x45\x4c\x30\x30\x30\x31\x35\x4e\x52" +
     b"\x45\x31\x35\x33\x00\x00\x00\x28\x50\x43\x4d\x42\x46\x41\x4e\x32" +
     b"\x50\x57\x52\x2d\x30\x30\x30\x35\x39\x2d\x30\x31\x2d\x42\x30\x30" +
     b"\x54\x48\x44\x45\x4c\x30\x30\x30\x31\x35\x4e\x52\x45\x31\x35\x33" +
     b"\x00\x00\x00\x00\x00\x00\x00\x2c\x50\x43\x4d\x20\x41\x20\x20\x20" +
     b"\x50\x57\x52\x2d\x30\x30\x30\x35\x39\x2d\x30\x31\x2d\x42\x30\x30" +
     b"\x20\x20\x20\x20\x54\x48\x44\x45\x4c\x30\x30\x30\x31\x35\x4e\x52" +
     b"\x45\x31\x32\x46\x00\x00\x00\x2c\x50\x43\x4d\x20\x42\x20\x20\x20" +
     b"\x50\x57\x52\x2d\x30\x30\x30\x35\x39\x2d\x30\x31\x2d\x42\x30\x30" +
     b"\x20\x20\x20\x20\x54\x48\x44\x45\x4c\x30\x30\x30\x31\x35\x4e\x52" +
     b"\x45\x31\x35\x33\x00\x00\x00\x2c\x49\x4f\x4d\x20\x41\x20\x20\x20" +
     b"\x54\x43\x41\x2d\x30\x30\x33\x34\x30\x2d\x30\x31\x2d\x42\x20\x20" +
     b"\x20\x20\x20\x20\x4d\x58\x45\x33\x34\x30\x30\x30\x32\x38\x50\x52" +
     b"\x41\x31\x36\x31\x00\x00\x00\x2c\x49\x4f\x4d\x20\x42\x20\x20\x20" +
     b"\x54\x43\x41\x2d\x30\x30\x33\x34\x30\x2d\x30\x31\x2d\x42\x20\x20" +
     b"\x20\x20\x20\x20\x4d\x58\x45\x33\x34\x30\x30\x30\x32\x38\x56\x52" +
     b"\x41\x31\x30\x43\x00\x00\x00\x2c\x42\x73\x42\x6f\x61\x72\x64\x31" +
     b"\x54\x43\x41\x2d\x30\x30\x33\x34\x31\x2d\x30\x31\x2d\x42\x2d\x41" +
     b"\x32\x20\x20\x20\x4d\x58\x45\x33\x34\x30\x30\x30\x32\x38\x38\x52" +
     b"\x42\x30\x33\x31\x00\x00\x00\x2c\x42\x73\x42\x6f\x61\x72\x64\x32" +
     b"\x54\x43\x41\x2d\x30\x30\x33\x34\x31\x2d\x30\x31\x2d\x42\x2d\x41" +
     b"\x32\x20\x20\x20\x4d\x58\x45\x33\x34\x30\x30\x30\x32\x38\x38\x52" +
     b"\x42\x30\x33\x31\x00\x00\x00\x00\x00\x00\x00\x2c\x42\x73\x42\x6f" +
     b"\x61\x72\x64\x20\x54\x43\x41\x2d\x30\x30\x33\x34\x31\x2d\x30\x31" +
     b"\x2d\x42\x2d\x41\x32\x20\x20\x20\x4d\x58\x45\x33\x34\x30\x30\x30" +
     b"\x32\x38\x38\x52\x42\x30\x33\x31\x00\x00\x00\x00\x00\x00\x00\x30" +
     b"\x49\x4f\x4d\x20\x41\x20\x20\x20\x54\x43\x41\x2d\x30\x30\x33\x34" +
     b"\x30\x2d\x30\x31\x2d\x42\x20\x20\x4d\x58\x45\x33\x34\x30\x30\x30" +
     b"\x32\x38\x50\x52\x41\x31\x36\x31\x42\x35\x2e\x30\x37\x2e\x31\x36" +
     b"\x00\x00\x00\x30\x49\x4f\x4d\x20\x42\x20\x20\x20\x54\x43\x41\x2d" +
     b"\x30\x30\x33\x34\x30\x2d\x30\x31\x2d\x42\x20\x20\x4d\x58\x45\x33" +
     b"\x34\x30\x30\x30\x32\x38\x56\x52\x41\x31\x30\x43\x42\x35\x2e\x30" +
     b"\x37\x2e\x31\x36\x00\x00\x00\x00\x00\x00\x00\x38\x53\x58\x50\x5f" +
     b"\x41\x5f\x50\x20\x54\x43\x41\x2d\x30\x30\x33\x34\x30\x2d\x30\x31" +
     b"\x2d\x42\x20\x20\x4d\x58\x45\x33\x34\x30\x30\x30\x32\x38\x50\x52" +
     b"\x41\x31\x36\x31\x42\x35\x2e\x30\x37\x2e\x31\x36\x42\x35\x2e\x30" +
     b"\x37\x2e\x31\x36\x00\x00\x00\x38\x53\x58\x50\x5f\x41\x5f\x53\x31" +
     b"\x54\x43\x41\x2d\x30\x30\x33\x34\x30\x2d\x30\x31\x2d\x42\x20\x20" +
     b"\x4d\x58\x45\x33\x34\x30\x30\x30\x32\x38\x50\x52\x41\x31\x36\x31" +
     b"\x42\x35\x2e\x30\x37\x2e\x31\x36\x42\x35\x2e\x30\x37\x2e\x31\x36" +
     b"\x00\x00\x00\x38\x53\x58\x50\x5f\x41\x5f\x53\x32\x54\x43\x41\x2d" +
     b"\x30\x30\x33\x34\x30\x2d\x30\x31\x2d\x42\x20\x20\x4d\x58\x45\x33" +
     b"\x34\x30\x30\x30\x32\x38\x50\x52\x41\x31\x36\x31\x42\x35\x2e\x30" +
     b"\x37\x2e\x31\x36\x42\x35\x2e\x30\x37\x2e\x31\x36\x00\x00\x00\x38" +
     b"\x53\x58\x50\x5f\x42\x5f\x50\x20\x54\x43\x41\x2d\x30\x30\x33\x34" +
     b"\x30\x2d\x30\x31\x2d\x42\x20\x20\x4d\x58\x45\x33\x34\x30\x30\x30" +
     b"\x32\x38\x56\x52\x41\x31\x30\x43\x42\x35\x2e\x30\x37\x2e\x31\x36" +
     b"\x42\x35\x2e\x30\x37\x2e\x31\x36\x00\x00\x00\x38\x53\x58\x50\x5f" +
     b"\x42\x5f\x53\x31\x54\x43\x41\x2d\x30\x30\x33\x34\x30\x2d\x30\x31" +
     b"\x2d\x42\x20\x20\x4d\x58\x45\x33\x34\x30\x30\x30\x32\x38\x56\x52" +
     b"\x41\x31\x30\x43\x42\x35\x2e\x30\x37\x2e\x31\x36\x42\x35\x2e\x30" +
     b"\x37\x2e\x31\x36\x00\x00\x00\x38\x53\x58\x50\x5f\x42\x5f\x53\x32" +
     b"\x54\x43\x41\x2d\x30\x30\x33\x34\x30\x2d\x30\x31\x2d\x42\x20\x20" +
     b"\x4d\x58\x45\x33\x34\x30\x30\x30\x32\x38\x56\x52\x41\x31\x30\x43" +
     b"\x42\x35\x2e\x30\x37\x2e\x31\x36\x42\x35\x2e\x30\x37\x2e\x31\x36")

# Output from sg_ses -p 0x07:
#
# Element Descriptor In diagnostic page:
#   generation code: 0x1
#   element descriptor by type list
#     Element type: Array device slot, subenclosure id: 0 [ti=0]
#       Overall descriptor: <empty>
#       Element 0 descriptor: SLOT  1 00
#       Element 1 descriptor: SLOT  2 01
#       Element 2 descriptor: SLOT  3 02
#       Element 3 descriptor: SLOT  4 03
#       Element 4 descriptor: SLOT  5 04
# ...
#       Element 58 descriptor: SLOT 59 4A
#       Element 59 descriptor: SLOT 60 4B
#     Element type: vendor specific [0x9e], subenclosure id: 0 [ti=1]
#       Overall descriptor: <empty>
#       Element 0 descriptor:                                                             TCA-00341-01-B-A2   MXE34000288RB031TCA-00340-01-B  MXE3400028PRA161TCA-00340-01-B  MXE3400028VRA10C00090001
#     Element type: Power supply, subenclosure id: 0 [ti=2]
#       Overall descriptor: <empty>
#       Element 0 descriptor: PCM A   PWR-00059-01-B00THDEL00015NRE12FA1000000TDPS-1200AB A000ABMT11210018120000F000000109
#       Element 1 descriptor: PCM B   PWR-00059-01-B00THDEL00015NRE153A1000000TDPS-1200AB A000ABMT11210018480000F000000109
#     Element type: Cooling, subenclosure id: 0 [ti=3]
#       Overall descriptor: <empty>
#       Element 0 descriptor: PCMAFAN1PWR-00059-01-B00THDEL00015NRE12F
#       Element 1 descriptor: PCMAFAN2PWR-00059-01-B00THDEL00015NRE12F
#       Element 2 descriptor: PCMBFAN1PWR-00059-01-B00THDEL00015NRE153
#       Element 3 descriptor: PCMBFAN2PWR-00059-01-B00THDEL00015NRE153
#     Element type: Temperature sensor, subenclosure id: 0 [ti=4]
#       Overall descriptor: <empty>
#       Element 0 descriptor: PCM A   PWR-00059-01-B00    THDEL00015NRE12F
#       Element 1 descriptor: PCM B   PWR-00059-01-B00    THDEL00015NRE153
#       Element 2 descriptor: IOM A   TCA-00340-01-B      MXE3400028PRA161
#       Element 3 descriptor: IOM B   TCA-00340-01-B      MXE3400028VRA10C
#       Element 4 descriptor: BsBoard1TCA-00341-01-B-A2   MXE34000288RB031
#       Element 5 descriptor: BsBoard2TCA-00341-01-B-A2   MXE34000288RB031
#     Element type: Audible alarm, subenclosure id: 0 [ti=5]
#       Overall descriptor: <empty>
#       Element 0 descriptor: BsBoard TCA-00341-01-B-A2   MXE34000288RB031
#     Element type: Enclosure services controller electronics, subenclosure id: 0 [ti=6]
#       Overall descriptor: <empty>
#       Element 0 descriptor: IOM A   TCA-00340-01-B  MXE3400028PRA161B5.07.16
#       Element 1 descriptor: IOM B   TCA-00340-01-B  MXE3400028VRA10CB5.07.16
#     Element type: SAS expander, subenclosure id: 0 [ti=7]
#       Overall descriptor: <empty>
#       Element 0 descriptor: SXP_A_P TCA-00340-01-B  MXE3400028PRA161B5.07.16B5.07.16
#       Element 1 descriptor: SXP_A_S1TCA-00340-01-B  MXE3400028PRA161B5.07.16B5.07.16
#       Element 2 descriptor: SXP_A_S2TCA-00340-01-B  MXE3400028PRA161B5.07.16B5.07.16
#       Element 3 descriptor: SXP_B_P TCA-00340-01-B  MXE3400028VRA10CB5.07.16B5.07.16
#       Element 4 descriptor: SXP_B_S1TCA-00340-01-B  MXE3400028VRA10CB5.07.16B5.07.16
#       Element 5 descriptor: SXP_B_S2TCA-00340-01-B  MXE3400028VRA10CB5.07.16B5.07.16


class DiagnosticDataBuffer(Buffer):
    def __init__(self, conf_page, *args, **kwargs):
        super(DiagnosticDataBuffer, self).__init__(*args, **kwargs)
        self.conf_page = conf_page


class Descriptor(Buffer):
    descriptor_length = be_int_field(where=bytes_ref[2:4])
    descriptor = bytearray_field(where_when_pack=bytes_ref[4:], where_when_unpack=bytes_ref[4:descriptor_length + 4])


class ElementDescriptor(Buffer):
    def _possible_elements_num(self):
        return self.type_descriptor_header.possible_elements_num

    overall_element = buffer_field(where=bytes_ref[0:], type=Descriptor)
    individual_elements = list_field(where=bytes_ref[after_ref(overall_element):], type=Descriptor,
                                     n=member_func_ref(_possible_elements_num))

    def unpack(self, buffer, type_descriptor_header):
        self.type_descriptor_header = type_descriptor_header
        return super(ElementDescriptor, self).unpack(buffer)


# ses3r05: 6.1.10
class ElementDescriptorDiagnosticPagesData(DiagnosticDataBuffer):
    def _unpack_status_descriptor(self, buffer, index, **kwargs):
        descriptor = ElementDescriptor()
        bytes = descriptor.unpack(buffer, self.conf_page.type_descriptor_header_list[index])
        return descriptor, bytes

    def _possible_elements_num(self):
        return len(self.conf_page.type_descriptor_header_list)

    page_code = be_int_field(where=bytes_ref[0])
    page_length = be_int_field(where=bytes_ref[2:4])
    generation_code = be_int_field(where=bytes_ref[4:8])
    element_descriptors = list_field(where=bytes_ref[8:], type=ElementDescriptor,
                                     unpack_selector=_unpack_status_descriptor,
                                     n=member_func_ref(_possible_elements_num))


# Tests

import string
import random


def junk_generator(size):
    chars = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(chars) for x in range(size)).encode('ASCII')


class SesDiagnostic(TestCase):
    def test_configuration_diagnostics_page(self):
        raw = SES_PAGE_SAMPLE
        page = ConfigurationDiagnosticPage()
        page.unpack(raw)
        self.assertEquals(len(page.enclosure_descriptor_list), 1)
        self.assertEquals(len(page.type_descriptor_header_list), 8)
        self.assertEquals(len(page.type_descriptor_text_list), 8)
        # print(page)
        return page

    def test_element_descriptor_diagnostics_page(self):
        config_page = self.test_configuration_diagnostics_page()
        raw = SES_ELEMENT_DESCR_PAGE_SAMPLE + junk_generator(40000)
        descr_page = ElementDescriptorDiagnosticPagesData(config_page)
        descr_page.unpack(raw)
        self.assertEquals(len(descr_page.element_descriptors), len(config_page.type_descriptor_header_list))
        for idx in range(len(config_page.type_descriptor_header_list)):
            self.assertEquals(len(descr_page.element_descriptors[idx].individual_elements),
                              config_page.type_descriptor_header_list[idx].possible_elements_num)
            print("{!r} has {!r} elements".format(config_page.type_descriptor_header_list[idx].element_type,
                                                  len(descr_page.element_descriptors[idx].individual_elements)))
            for i in range(len(descr_page.element_descriptors[idx].individual_elements)):
                print("elem {!r}[{!r}] is {!r}".format(config_page.type_descriptor_header_list[idx].element_type, i,
                                                       descr_page.element_descriptors[idx].individual_elements[i].descriptor))
